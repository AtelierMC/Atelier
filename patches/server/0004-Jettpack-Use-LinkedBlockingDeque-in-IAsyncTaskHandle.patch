From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Simon Gardling <titaniumtown@gmail.com>
Date: Wed, 2 Mar 2022 09:08:56 +0700
Subject: [PATCH] Jettpack: Use LinkedBlockingDeque in IAsyncTaskHandler

This patch was originally created under the GNU Lesser General Public License v3.0 for the "JettPack" project: https://gitlab.com/Titaniumtown/JettPack

Uses `LinkedBlockingDeque` instead of a normal queue inside of `IAsyncTaskHandler`

diff --git a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
index 7a4ade1a4190bf4fbb048919ae2be230f7b80fff..16ba4d44b068f14569993ba1538701b2de5a1b08 100644
--- a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
+++ b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
@@ -15,11 +15,19 @@ import net.minecraft.util.profiling.metrics.MetricSampler;
 import net.minecraft.util.profiling.metrics.MetricsRegistry;
 import net.minecraft.util.profiling.metrics.ProfilerMeasured;
 import org.slf4j.Logger;
+// Jettpack start
+import java.util.concurrent.LinkedBlockingDeque;
+import java.util.concurrent.TimeUnit;
+// Jettpack end
+
 
 public abstract class BlockableEventLoop<R extends Runnable> implements ProfilerMeasured, ProcessorHandle<R>, Executor {
     private final String name;
     private static final Logger LOGGER = LogUtils.getLogger();
-    private final Queue<R> pendingRunnables = Queues.newConcurrentLinkedQueue();
+    // Jettpack start
+    private final LinkedBlockingDeque<R> pendingRunnables = new LinkedBlockingDeque();
+    private R next = null;
+    // Jettpack end
     private int blockingCount;
 
     protected BlockableEventLoop(String name) {
@@ -89,7 +97,7 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Profiler
     @Override
     public void tell(R runnable) {
         this.pendingRunnables.add(runnable);
-        LockSupport.unpark(this.getRunningThread());
+        // LockSupport.unpark(this.getRunningThread()); // Jettpack
     }
 
     @Override
@@ -117,15 +125,19 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Profiler
     }
 
     public boolean pollTask() {
-        R runnable = this.pendingRunnables.peek();
-        if (runnable == null) {
-            return false;
-        } else if (this.blockingCount == 0 && !this.shouldRun(runnable)) {
+        // Jettpack start
+        if (this.next == null && !this.pendingRunnables.isEmpty()) {
+            this.waitForTasks();
+        }
+        if (this.next == null) {
             return false;
         } else {
-            this.doRunTask(this.pendingRunnables.remove());
+            R r2 = this.next;
+            this.next = null;
+            this.doRunTask(r2);
             return true;
         }
+        // Jettpack end
     }
 
     public void managedBlock(BooleanSupplier stopCondition) {
@@ -144,8 +156,15 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Profiler
     }
 
     protected void waitForTasks() {
-        Thread.yield();
-        LockSupport.parkNanos("waiting for tasks", 100000L);
+        // Jettpack start
+        if (this.next != null) {
+            throw new IllegalStateException("next != null");
+        }
+        try {
+            this.next = this.pendingRunnables.poll(100L, TimeUnit.MICROSECONDS);
+        } catch (InterruptedException ignored) { }
+        // Jettpack end
+
     }
 
     protected void doRunTask(R task) {
