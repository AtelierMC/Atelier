From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: foss-mc <69294560+foss-mc@users.noreply.github.com>
Date: Wed, 2 Mar 2022 09:26:37 +0700
Subject: [PATCH] Patina: remove TickTask


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index a301f079fc899cb3cb7a34d262a744336e154dc2..198cb50e3245e4d60fec1fac5a661a8dab1765d9 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -186,7 +186,7 @@ import org.bukkit.event.server.ServerLoadEvent;
 import co.aikar.timings.MinecraftTimings; // Paper
 import org.spigotmc.SlackActivityAccountant; // Spigot
 
-public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements CommandSource, AutoCloseable {
+public abstract class MinecraftServer extends ReentrantBlockableEventLoop<Runnable> implements CommandSource, AutoCloseable { // Patina
 
     private static MinecraftServer SERVER; // Paper
     public static final Logger LOGGER = LogUtils.getLogger();
@@ -1368,19 +1368,23 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     @Override
-    public TickTask wrapRunnable(Runnable runnable) {
+    public Runnable wrapRunnable(Runnable runnable) { // Patina
         // Paper start - anything that does try to post to main during watchdog crash, run on watchdog
         if (this.hasStopped && Thread.currentThread().equals(shutdownThread)) {
             runnable.run();
             runnable = () -> {};
         }
         // Paper end
-        return new TickTask(this.tickCount, runnable);
+        return runnable; // Patina
     }
 
+    // Patina start
+    /*
     protected boolean shouldRun(TickTask ticktask) {
         return ticktask.getTick() + 3 < this.tickCount || this.haveTime();
     }
+    */
+    // Patina end
 
     @Override
     public boolean pollTask() {
@@ -1412,10 +1416,14 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
 
+    // Patina start
+    /*
     public void doRunTask(TickTask ticktask) { // CraftBukkit - decompile error
         this.getProfiler().incrementCounter("runTask");
         super.doRunTask(ticktask);
     }
+    */
+    // Patina end
 
     private void updateStatusIcon(ServerStatus metadata) {
         Optional<File> optional = Optional.of(this.getFile("server-icon.png")).filter(File::isFile);
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index f33ae29fd86fbfb2a94748fbf9515e3b4ae01753..f02439f5e082801e003d2385e9e1f9c9ce375ef7 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -1265,10 +1265,14 @@ public class ServerChunkCache extends ChunkSource {
             return runnable;
         }
 
+        // Patina start
+        /*
         @Override
         protected boolean shouldRun(Runnable task) {
             return true;
         }
+        */
+        // Patina end
 
         @Override
         protected boolean scheduleExecutables() {
diff --git a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
index 16ba4d44b068f14569993ba1538701b2de5a1b08..9d90d3eb538e9746d768059da80c7ec02ae65988 100644
--- a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
+++ b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
@@ -37,7 +37,7 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Profiler
 
     protected abstract R wrapRunnable(Runnable runnable);
 
-    protected abstract boolean shouldRun(R task);
+    // protected abstract boolean shouldRun(R task); // Patina
 
     public boolean isSameThread() {
         return Thread.currentThread() == this.getRunningThread();
